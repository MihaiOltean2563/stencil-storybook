/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface DgSpinner {}
  interface FrpButton {}
  interface FrpColors {}
  interface FrpIcon {
    /**
    * This component accepts a variable string for a color class we already declared
    */
    'color': string;
    /**
    * Value passed in Ems and if empty, defaults to 'lg (48px)'
    */
    'size': string | {};
    /**
    * This component accepts a brand string or defaults to 'default' theme
    */
    'theme': string;
    /**
    * Can be one of the following classes declared in _icons.scss
    */
    'type': string;
  }
  interface FrpIcons {}
  interface FrpTooltip {
    'text': string;
  }
  interface MyButton {
    'label': string;
  }
  interface MyComponent {
    /**
    * The first name
    */
    'first': string;
    /**
    * The last name
    */
    'last': string;
    /**
    * The middle name
    */
    'middle': string;
  }
}

declare global {


  interface HTMLDgSpinnerElement extends Components.DgSpinner, HTMLStencilElement {}
  var HTMLDgSpinnerElement: {
    prototype: HTMLDgSpinnerElement;
    new (): HTMLDgSpinnerElement;
  };

  interface HTMLFrpButtonElement extends Components.FrpButton, HTMLStencilElement {}
  var HTMLFrpButtonElement: {
    prototype: HTMLFrpButtonElement;
    new (): HTMLFrpButtonElement;
  };

  interface HTMLFrpColorsElement extends Components.FrpColors, HTMLStencilElement {}
  var HTMLFrpColorsElement: {
    prototype: HTMLFrpColorsElement;
    new (): HTMLFrpColorsElement;
  };

  interface HTMLFrpIconElement extends Components.FrpIcon, HTMLStencilElement {}
  var HTMLFrpIconElement: {
    prototype: HTMLFrpIconElement;
    new (): HTMLFrpIconElement;
  };

  interface HTMLFrpIconsElement extends Components.FrpIcons, HTMLStencilElement {}
  var HTMLFrpIconsElement: {
    prototype: HTMLFrpIconsElement;
    new (): HTMLFrpIconsElement;
  };

  interface HTMLFrpTooltipElement extends Components.FrpTooltip, HTMLStencilElement {}
  var HTMLFrpTooltipElement: {
    prototype: HTMLFrpTooltipElement;
    new (): HTMLFrpTooltipElement;
  };

  interface HTMLMyButtonElement extends Components.MyButton, HTMLStencilElement {}
  var HTMLMyButtonElement: {
    prototype: HTMLMyButtonElement;
    new (): HTMLMyButtonElement;
  };

  interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {}
  var HTMLMyComponentElement: {
    prototype: HTMLMyComponentElement;
    new (): HTMLMyComponentElement;
  };
  interface HTMLElementTagNameMap {
    'dg-spinner': HTMLDgSpinnerElement;
    'frp-button': HTMLFrpButtonElement;
    'frp-colors': HTMLFrpColorsElement;
    'frp-icon': HTMLFrpIconElement;
    'frp-icons': HTMLFrpIconsElement;
    'frp-tooltip': HTMLFrpTooltipElement;
    'my-button': HTMLMyButtonElement;
    'my-component': HTMLMyComponentElement;
  }
}

declare namespace LocalJSX {
  interface DgSpinner {}
  interface FrpButton {}
  interface FrpColors {}
  interface FrpIcon {
    /**
    * This component accepts a variable string for a color class we already declared
    */
    'color'?: string;
    /**
    * Value passed in Ems and if empty, defaults to 'lg (48px)'
    */
    'size'?: string | {};
    /**
    * This component accepts a brand string or defaults to 'default' theme
    */
    'theme'?: string;
    /**
    * Can be one of the following classes declared in _icons.scss
    */
    'type'?: string;
  }
  interface FrpIcons {}
  interface FrpTooltip {
    'text'?: string;
  }
  interface MyButton {
    'label'?: string;
    'onOnClick'?: (event: CustomEvent<any>) => void;
  }
  interface MyComponent {
    /**
    * The first name
    */
    'first'?: string;
    /**
    * The last name
    */
    'last'?: string;
    /**
    * The middle name
    */
    'middle'?: string;
  }

  interface IntrinsicElements {
    'dg-spinner': DgSpinner;
    'frp-button': FrpButton;
    'frp-colors': FrpColors;
    'frp-icon': FrpIcon;
    'frp-icons': FrpIcons;
    'frp-tooltip': FrpTooltip;
    'my-button': MyButton;
    'my-component': MyComponent;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'dg-spinner': LocalJSX.DgSpinner & JSXBase.HTMLAttributes<HTMLDgSpinnerElement>;
      'frp-button': LocalJSX.FrpButton & JSXBase.HTMLAttributes<HTMLFrpButtonElement>;
      'frp-colors': LocalJSX.FrpColors & JSXBase.HTMLAttributes<HTMLFrpColorsElement>;
      'frp-icon': LocalJSX.FrpIcon & JSXBase.HTMLAttributes<HTMLFrpIconElement>;
      'frp-icons': LocalJSX.FrpIcons & JSXBase.HTMLAttributes<HTMLFrpIconsElement>;
      'frp-tooltip': LocalJSX.FrpTooltip & JSXBase.HTMLAttributes<HTMLFrpTooltipElement>;
      'my-button': LocalJSX.MyButton & JSXBase.HTMLAttributes<HTMLMyButtonElement>;
      'my-component': LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
    }
  }
}


